"""
    This file contains all of the functions that directly interact with AWS CloudWatch and CloudWatch logs.
"""

import boto3

from utilities.common_utility import exception_handler

LOGS_CLIENT = boto3.client("logs")  # noqa


@exception_handler
def get_log_events(log_group, log_stream, start_time=None, end_time=None, request_id=None, limit=None, descending=False):  # noqa

    # TODO Implement log returning
    pass
    # import json
    #
    # # If the request_id is provided, get the start and stop time of that request ID
    #
    #
    # # Create the arguments to be passed into the get_log_function
    # get_log_args = dict(logGroupName=log_group, logStreamName=log_stream)
    #
    # if start_time:
    #     get_log_args["startTime"] = start_time
    # if end_time:
    #     get_log_args["endTime"] = end_time
    # if request_id:
    #     get_log_args["startTime"] = start_time
    # if start_time:
    #     get_log_args["startTime"] = start_time
    #
    # lambda_invocation_response = LOGS_CLIENT.get_log_events( nextToken='string', limit=123,
    #     startFromHead=True | False
    # )
    #
    # if asynchronous:  # If "asynchronous" is set to "True", simply return "True" to indicate a successful invocation
    #     return True
    # elif get_execution_log:  # If "get_execution_log" is set to "True", then return the log created by the execution
    #
    # elif get_lambda_response:  # If "get_lambda_response" is set to "True return the response generated by the lambda
    #     return json.loads(lambda_invocation_response["Payload"].read().decode("utf-8"))
    # else:  # Else, return the invocation AWS response object
    #     return lambda_invocation_response
