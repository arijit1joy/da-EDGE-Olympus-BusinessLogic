version:      0.2 

env:
  secrets-manager:
    SONAR_LOGIN: /da-sca-sonar/sonar/sonar-common-token:sonar_common_token
    SONAR_HOST: /da-sca-sonar/sonar/sonar-common-token:sonar_host_https_url
    ARTIFACTORY_API_KEY: /OPS/COMMON/INFRA/JFROG/ARTIFACTORY:ARTIFACTORY_TOKEN
    ARTIFACTORY_USER: /OPS/COMMON/INFRA/JFROG/ARTIFACTORY:ARTIFACTORY_USER
    ARTIFACTORY_URL: /OPS/COMMON/INFRA/JFROG/ARTIFACTORY:ARTIFACTORY_URL

phases: 
 
  install:  
    commands:
    - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
    - pip install -q awscli==1.16.209 
    - apt-get install zip 
    - apt-get install unzip
    - curl -sL https://deb.nodesource.com/setup_10.x | bash - 
    - apt-get install nodejs -y 
    - nodejs --version 
    - npm --version  
    - curr_dir=$(pwd) 
    - mkdir "$curr_dir/target" 
    - sed -i -E 's|LoggingLevel\s*:\s*\"[dD][eE][bB][uU][gG]\"|LoggingLevel~~~~~~ \"info\"|gi' cloudformation/environment.yml
    - sed -i -e 's|~~~~~~|:|g' cloudformation/environment.yml
    - cd cloudformation 
    - versionId=$(date +"%m-%d-%Y-%H-%M-%S") 
    - echo $versionId
    - pip install -q ruamel.yaml
    - for paramsFile in ./Param*.json ;  
      do  
        tmp=$(mktemp); 
        sed "s/"empty"/${versionId}/g" $paramsFile > "$tmp" && mv "$tmp" $paramsFile;
        sh "${curr_dir}/cloudformation/layer-helper.sh" $paramsFile;
      done; 
    - cp *.json .. 
    - cd ..

  pre_build:
    commands:
      - echo Entering pre_build phase...
      - echo $HOME
      - sed -i -e "s|ARTIFACTORY_USER|$ARTIFACTORY_USER|g" pip.conf
      - sed -i -e "s|ARTIFACTORY_PASSWORD|$ARTIFACTORY_API_KEY|g" pip.conf
      - cat pip.conf
      - mkdir /root/.pip/
      - cp pip.conf /root/.pip/pip.conf
 
  build: 
    commands: 
      - echo Starting build in $(pwd) 
      - echo Build started on $(date) 
      - pip install -q coverage
      - echo ${S3Bucket} 
      - echo ${KMSKey} 
      - echo HOME ${HOME} 
      # install sonar-scanner
      - mkdir /opt/sonarscanner
      - cd /opt/sonarscanner
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip -q
      - unzip -q sonar-scanner-cli-4.6.2.2472-linux.zip
      - rm sonar-scanner-cli-4.6.2.2472-linux.zip
      - ln -s /opt/sonarscanner/sonar-scanner-4.6.2.2472-linux/bin/sonar-scanner /usr/local/bin/sonar-scanner
      - pip install -q pypika
      - cd $curr_dir
      # build project folder and package build file 
      - ls -lrt "$curr_dir"
      - x=$(ls "$(pwd)")
      - for d in $x ;
        do
          mydir=${d};   
          if [ $mydir != "cloudformation" ] && [ $mydir != "EDBE-J1939-BDD" ] && [ -d "$mydir" ]; then 
              cd "$mydir"; 
              echo "Processing - $mydir"; 
              echo "Current dir - $(pwd)"; 
              if [ -f requirements.txt ]; then
                python -m venv "${mydir}-venv";
                . ${mydir}-venv/bin/activate ;
                if [ -f dependencies.txt ]; then
                  pip install -q -r dependencies.txt -t ./lib ;
                fi;
                pipInstallCheckExitCode=$(echo $?);
                if [ $pipInstallCheckExitCode -ne 0 ]; then
                  echo "\n#===================================================================#\n";
                  echo "[ERROR] ---> pip install of dependencies failed for the project '$mydir'. Exit code => '$pipInstallCheckExitCode'! Aborting Build!";
                  echo "\n#===================================================================#\n";
                  deactivate;
                  exit 1;
                fi;
                zip -q -r "$mydir.zip" . -x "./${mydir}-venv/*";
                coverage run -m unittest discover -s tests;
                testCaseExecutionExitCode=$?;
                deactivate;
                if [ $testCaseExecutionExitCode -ne 0 ]; then
                  echo "\n#===================================================================#\n";
                  echo "[ERROR] ---> Some of the TDD/Code Coverage test cases failed for the project '$mydir'. Exit code => '$testCaseExecutionExitCode'! Aborting Build!";
                  echo "\n#===================================================================#\n";
                fi;
                coverage report --omit tests/*;
                coverage xml;
                sonar-scanner -Dsonar.login=$SONAR_LOGIN -Dsonar.host.url=$SONAR_HOST -Dsonar.python.coverage.reportPaths="coverage.xml" -Dsonar.branch.name="master";
                echo "Printing dir contents to find the coverage.xml file . . . ";
                ls -l;
                if [ -f "../SonarqubeQualityChecker.sh" ] && [ -f "sonar-project.properties" ]; then
                  cd ..;
                  tr -d '\r' < SonarqubeQualityChecker.sh > CleanSonarqubeQualityChecker.sh;
                  bash CleanSonarqubeQualityChecker.sh $mydir "/da-sca-sonar/sonar/sonar-common-token" "master";
                  qualityCheckExitCode=$(echo $?);
                  if [ $qualityCheckExitCode -ne 0 ]; then
                    echo "\n#===================================================================#\n";
                    echo "[ERROR] ---> The Sonarqube Quality Gate condition verification failed for the project '$mydir'! Aborting Build!";
                    echo "\n#===================================================================#\n";
                    exit 1;
                  fi;
                  cd "$mydir";
                else
                  echo "\n#--------------------------------------------------------------------------------#\n";
                  echo "The Sonarqube Quality Gate condition verification script ('SonarQubeQualityChecker.sh') is missing from this repo AND/OR ('sonar-project.properties') is missing from this project => $mydir\n";
                  echo "Please, add the 'SonarQubeQualityChecker.sh' file in the root repo (same folder as this build spec file) AND/OR the appropriate 'sonar-project.properties' in the project => $mydir\n";
                  echo "Build will proceed, but note that there was no Sonaqube Quality Gate verification done for the project => $mydir\n";
                  echo "\n#--------------------------------------------------------------------------------#\n";
                fi;              
                cp "$mydir.zip" "$curr_dir/target"; 
              else           
                echo "unknown platform"; 
                break;        
              fi;        
              cd ..;     
          fi;  
        done || exit 1 
      - ls -lrt "$curr_dir/target" 
      - aws s3 cp "$curr_dir/target" s3://${S3Bucket}/$versionId --recursive 
      - aws s3 cp "$curr_dir/target" s3://${CrossRegionBucket}/$versionId --recursive
      - pwd 
      - ls -lrt 
      - cd $curr_dir 
      - aws cloudformation package 
        --template-file cloudformation/environment.yml 
        --s3-bucket ${S3Bucket} 
        --s3-prefix builds
        --kms-key-id ${KMSKey}
        --output-template-file transformed-template.yml
      - aws cloudformation package
        --template-file cloudformation/environment.yml
        --s3-bucket ${CrossRegionBucket}
        --s3-prefix builds
        --kms-key-id ${KMS_KEY_ProdRegion}
        --output-template-file transformed-template-us-east-2.yml
  post_build: 
    commands: 
      - echo Build completed on `date` 
 
# Below is required by CodePipeline, do not change.  
artifacts: 
  files:  
  - transformed-template.yml
  - transformed-template-us-east-2.yml 
  - Parameters-dev.json 
  - Parameters-test.json 
  - Parameters-stage.json 
  - Parameters-prod.json