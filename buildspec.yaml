version:      0.2 
 

phases: 
 
  install:  
    commands:  
    - sudo apt-get update 
    - pip install awscli==1.16.141 
    - sudo apt-get install zip 
    - sudo apt-get install unzip 
    - sudo apt-get install jq 
    - curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - 
    - sudo apt-get install nodejs -y 
    - sudo npm install -g yarnpkg 
    - nodejs --version 
    - npm --version 
    - yarn --version 
    - sudo npm config set user 0 
    - sudo npm config set unsafe-perm true 
    - sudo npm install --global del-cli 
    - sudo npm install -g typescript 
    - sudo npm install --global make-dir-cli 
    - curr_dir=$(pwd) 
    - mkdir "$curr_dir/target" 
    - cd cloudformation 
    - versionId=$(date +"%m-%d-%Y-%H-%M-%S") 
    - echo $versionId
    - for paramsFile in ./Param*.json ;  
      do  
        echo $paramsFile;  
        tmp=$(mktemp); 
        sed "s/"empty"/${versionId}/g" $paramsFile > "$tmp" && mv "$tmp" $paramsFile;
        cd ..;
        sh "${curr_dir}/layer-helper.sh" $paramsFile;
        cd cloudformation;
      done; 
    - cp *.json .. 
    - cd ..
 
  build: 
    commands: 
      - echo Starting build in $(pwd) 
      - echo Build started on $(date) 
      - echo ${S3Bucket} 
      - echo ${KMSKey} 
      - echo HOME ${HOME} 
      # build project folder and package build file 
      - ls -lrt "$curr_dir"
      - x=$(ls "$(pwd)")
      - for d in $x ;
        do
          mydir=${d};   
          if [ $mydir != "cloudformation" ] && [ $mydir != "EDBE-J1939-BDD" ] && [ -d "$mydir" ]; then 
              cd "$mydir"; 
              echo "Processing - $mydir"; 
              echo "Current dir - $(pwd)";
              if [ -f pom.xml ]; then
                mvn package -DskipTests;    
                ls -lrt "$curr_dir/$mydir";  
                echo "Build path = $curr_dir/$mydir/target"; 
                if [ -d "$curr_dir/$mydir/target" ]; then       
                  cd "target";           
                  jarFile=`find . -type f \( -iname "*.jar" ! -iname "original*.jar" \)`; 
                  echo "JAR FILE NAME = $jarFile";     
                  cp "$jarFile" "$curr_dir/target"; 
                  ls -lrt "$curr_dir/target";  
                  cd ..; 
                else 
                  echo "Build Failed for $mydir"; 
                fi;   
              elif [ -f requirements.txt ]; then
                pip install -r requirements.txt -t ./lib ;
                zip -r "$mydir.zip" .;               
                cp "$mydir.zip" "$curr_dir/target";        
              elif [ -f package.json ]; then           
                npm cache clean;           
                npm config set strict-ssl false;           
                npm config set registry="http://registry.npmjs.org/";           
                npm install npm -g;           
                npm install --silent;        
                npm run build; 
                ls -lrt "$curr_dir/$mydir";  
                echo "Build path = $curr_dir/$mydir/dist"; 
                if [ -d "$curr_dir/$mydir/dist" ]; then           
                  cd dist;           
                  zip -r "$mydir.zip" .;           
                  cp "$mydir.zip" "$curr_dir/target";            
                  cd ..;   
                else 
                  echo "Build Failed for $mydir"; 
                fi;       
              else           
                echo "unknown platform"; 
                break;        
              fi;        
              cd ..;     
          fi;  
        done || exit 1 
      - ls -lrt "$curr_dir/target" 
      - aws s3 cp "$curr_dir/target" s3://${S3Bucket}/$versionId --recursive 
      - pwd 
      - ls -lrt 
      - cd $curr_dir 
      - aws cloudformation package 
        --template-file cloudformation/environment.yml 
        --s3-bucket ${S3Bucket} 
        --s3-prefix builds 
        --kms-key-id ${KMSKey} 
        --output-template-file transformed-template.yml 

 
  post_build: 
    commands: 
      - echo Build completed on `date` 
 
# Below is required by CodePipeline, do not change.  
artifacts: 
  files:  
  - transformed-template.yml 
  - Parameters-dev.json 
  - Parameters-test.json 
  - Parameters-stage.json 
  - Parameters-prod.json 